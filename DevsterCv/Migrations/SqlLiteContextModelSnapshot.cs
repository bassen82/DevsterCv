// <auto-generated />
using System;
using DevsterCv;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevsterCv.Migrations
{
    [DbContext(typeof(SqlLiteContext))]
    partial class SqlLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("DevsterCv.Models.Assigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Beskrivning")
                        .HasColumnType("TEXT");

                    b.Property<int>("Employeeid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Focus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Roll")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teknik")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uppdrag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Assigments");
                });

            modelBuilder.Entity("DevsterCv.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyPostalAdress")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DevsterCv.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Linkedin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tele")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DevsterCv.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssigmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeRole")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interest")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileCompany")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileCompanyAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileCompanyPostalAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AssigmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeExpertise", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpertiseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId", "ExpertiseId");

                    b.HasIndex("ExpertiseId");

                    b.ToTable("EmployeeExpertises");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeMiddleware", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MiddlewareId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId", "MiddlewareId");

                    b.HasIndex("MiddlewareId");

                    b.ToTable("EmployeeMiddlewares");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTechnique", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("EmployeeTechniques");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTrade", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId", "TradeId");

                    b.HasIndex("TradeId");

                    b.ToTable("EmployeeTrades");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTraining", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("EmployeeTrainings");
                });

            modelBuilder.Entity("DevsterCv.Models.Expertise", b =>
                {
                    b.Property<int>("ExpertiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ExpertiseId");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("DevsterCv.Models.Middleware", b =>
                {
                    b.Property<int>("MiddlewareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("MiddlewareId");

                    b.ToTable("Middlewares");
                });

            modelBuilder.Entity("DevsterCv.Models.Technique", b =>
                {
                    b.Property<int>("TechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TechniqueId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("DevsterCv.Models.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TradeId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("DevsterCv.Models.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDegree")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TrainingId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("DevsterCv.Models.Employee", b =>
                {
                    b.HasOne("DevsterCv.Models.Assigment", null)
                        .WithMany("Employees")
                        .HasForeignKey("AssigmentId");
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeExpertise", b =>
                {
                    b.HasOne("DevsterCv.Models.Employee", "Employee")
                        .WithMany("EmployeeExpertises")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevsterCv.Models.Expertise", "Expertise")
                        .WithMany("EmployeeExpertises")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeMiddleware", b =>
                {
                    b.HasOne("DevsterCv.Models.Employee", "Employee")
                        .WithMany("EmployeeMiddleswares")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevsterCv.Models.Middleware", "Middleware")
                        .WithMany("EmployeeMiddleswares")
                        .HasForeignKey("MiddlewareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTechnique", b =>
                {
                    b.HasOne("DevsterCv.Models.Employee", "Employee")
                        .WithMany("EmployeeTechniques")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevsterCv.Models.Technique", "Technique")
                        .WithMany("EmployeeTechniques")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTrade", b =>
                {
                    b.HasOne("DevsterCv.Models.Employee", "Employee")
                        .WithMany("EmployeeTrades")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevsterCv.Models.Trade", "Trade")
                        .WithMany("EmployeeTrades")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevsterCv.Models.EmployeeTraining", b =>
                {
                    b.HasOne("DevsterCv.Models.Employee", "Employee")
                        .WithMany("EmployeeTrainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevsterCv.Models.Training", "Training")
                        .WithMany("EmployeeTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
